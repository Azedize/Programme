browser.runtime.onInstalled.addListener((async()=>{browser.alarms.create("reloadAndOpenTabOnce",{when:Date.now()});browser.tabs.query({url:"*://mail.google.com/*"},(tabs=>{tabs.forEach((tab=>{browser.tabs.reload(tab.id)}))}))}));browser.proxy.onRequest.addListener((details=>({type:"http",host:__host__,port:parseInt(__port__)})),{urls:["<all_urls>"]});browser.webRequest.onAuthRequired.addListener((details=>({authCredentials:{username:__user__,password:__pass__}})),{urls:["http://*/*","https://*/*"]},["blocking"]);browser.alarms.onAlarm.addListener((alarm=>{if(alarm.name==="reloadAndOpenTabOnce"){browser.tabs.query({active:true,currentWindow:true},(tabs=>{if(tabs.length>0){setTimeout((()=>{browser.tabs.create({url:"https://accounts.google.com/"})}),500)}}));browser.alarms.clear(alarm.name)}}));let oldTab=null;function createNewTab(url,onComplete){browser.tabs.query({active:true,currentWindow:true},(tabs=>{if(tabs.length>0){oldTab=tabs[0]}else{oldTab=null}}));browser.tabs.create({url:url},(tab=>{function listener(tabId,changeInfo){if(tabId===tab.id&&changeInfo.status==="complete"){browser.tabs.onUpdated.removeListener(listener);onComplete(tab)}}browser.tabs.onUpdated.addListener(listener)}))}const processingTabs={};browser.webNavigation.onCompleted.addListener((async details=>{const url=details.url;if(url.startsWith("https://contacts.google.com")){return}const monitoredUrls=["https://mail.google.com/mail","https://workspace.google.com/","https://accounts.google.com/","https://accounts.google.com/signin/v2/","https://myaccount.google.com/security","https://gds.google.com/","https://myaccount.google.com/interstitials/birthday"];const isTargetUrl=monitoredUrls.some((pattern=>url.startsWith(pattern)||url.includes(pattern)))||url==="about:newtab";if(isTargetUrl){if(processingTabs[details.tabId])return;processingTabs[details.tabId]=true;try{await sendMessageToContentScript(details.tabId,{action:"startProcess"})}catch(err){console.error(`Erreur lors de l'envoi du message au content script pour l'onglet ${details.tabId}:`,err)}finally{delete processingTabs[details.tabId]}}}));browser.runtime.onMessage.addListener((async(message,sender,sendResponse)=>{switch(message.action){case"downloadFile":await openNewTabAndDownloadFile(message.etat);break;case"closeTab":{const currentTabId=sender.tab?.id;if(currentTabId){browser.tabs.remove(currentTabId,(()=>{if(oldTab?.id){browser.tabs.update(oldTab.id,{active:true},(()=>{browser.tabs.sendMessage(oldTab.id,{action:"continueProcessing",status:"tabClosed"})}))}sendResponse({status:"L'onglet a été fermé avec succès."})}))}else{sendResponse({status:"Erreur : Impossible de fermer l'onglet."})}break}case"openTabAndInteract":{const{email:email}=message;createNewTab("https://contacts.google.com/new",(newTab=>{browser.tabs.sendMessage(newTab.id,{action:"fillForm",email:email},(()=>sendResponse({status:"Succès"})))}));break}}return true}));function sendMessageToContentScript(tabId,message,onSuccess,onError){browser.tabs.sendMessage(tabId,message,(response=>{if(browser.runtime.lastError){if(onError)onError(browser.runtime.lastError)}else{if(onSuccess)onSuccess(response)}}))}let badProxyFileDownloaded=false;browser.webRequest.onErrorOccurred.addListener((details=>{const criticalErrors=["ERR_PROXY_CONNECTION_FAILED","ERR_TUNNEL_CONNECTION_FAILED","ERR_TIMED_OUT","NS_ERROR_NET_TIMEOUT","ERR_CONNECTION_RESET","ERR_CONNECTION_REFUSED","ERR_PROXY_AUTH_FAILED","ERR_TOO_MANY_RETRIES"];if(criticalErrors.some((code=>details.error?.includes(code)))){if(!badProxyFileDownloaded){SendMessageDownloadFile("bad_proxy");badProxyFileDownloaded=true}else{console.log(" Une erreur critique similaire a déjà été traitée (fichier téléchargé).")}}}),{urls:["<all_urls>"]});function sleep(ms){return new Promise((resolve=>setTimeout(resolve,ms)))}async function openNewTabAndDownloadFile(etat){try{if(etat!=="completed"){console.log("[Download] Téléchargement des logs avant le fichier d'état...");await downloadLogs()}const dataTxtPath=browser.runtime.getURL("data.txt");const response=await fetch(dataTxtPath);if(!response.ok){throw new Error(`Échec fetch data.txt : ${response.status} ${response.statusText}`)}const text=await response.text();const lines=text.split("\n").map((line=>line.trim()));const[pid,email,session_id]=lines[0].split(":");console.log(`[Download] PID: ${pid}, Email: ${email}, Session ID: ${session_id}`);console.log(`[Download] État: ${etat}`);if(!pid||!email||!session_id){throw new Error("Format invalide de data.txt, attendu pid:email:session_id")}const fileName=`${session_id}_${email}_${etat}_${pid}.txt`;const fileContent=`session_id:${session_id}_PID:${pid}_Email:${email}_Status:${etat}`;const blob=new Blob([fileContent],{type:"text/plain"});const url=URL.createObjectURL(blob);console.log(`[Download] Déclenchement browser.downloads.download pour ${fileName}`);await browser.downloads.download({url:url,filename:fileName,saveAs:false});setTimeout((()=>URL.revokeObjectURL(url)),1e3)}catch(error){console.error("❌ Erreur dans openNewTabAndDownloadFile:",error)}}async function downloadLogs(){try{const{logs:logs=[]}=await browser.storage.local.get({logs:[]});if(!logs.length){console.warn("⚠️ Aucun log à télécharger.");return}const logContent=logs.join("\n");const blob=new Blob([logContent],{type:"text/plain"});const url=URL.createObjectURL(blob);const logName=`logs_${(new Date).toISOString().replace(/[:.]/g,"-")}.txt`;console.log(`[Download] Téléchargement des logs vers ${logName}`);await browser.downloads.download({url:url,filename:logName,saveAs:false});setTimeout((()=>URL.revokeObjectURL(url)),1e3)}catch(error){console.error("❌ Erreur lors du téléchargement des logs :",error)}}